import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Head } from '@inertiajs/react';
import React, { useState } from 'react';
import { DndContext } from '@dnd-kit/core';
import { SortableContext, horizontalListSortingStrategy, useSortable } from '@dnd-kit/sortable';
import { arrayMove } from '@dnd-kit/sortable';
import { useDroppable } from '@dnd-kit/core';

// Initial columns with tasks
const initialColumns = [
  { id: 'to-do', title: 'To Do', items: ['Task 1', 'Task 2', 'Task 3'] },
  { id: 'in-progress', title: 'In Progress', items: ['Task 4'] },
  { id: 'done', title: 'Done', items: [] },
];

function KanbanBoard() {
    console.log('kanbanboard');
  const [columns, setColumns] = useState(initialColumns);

  // Handle the drag end event to reorder tasks
  const handleDragEnd = (event) => {
        console.log('test');
    const { active, over } = event;

    if (!over) return;

    const activeColumn = columns.find((col) => col.items.includes(active.id));
    const overColumn = columns.find((col) => col.id === over.id);

    if (activeColumn === overColumn) {
      const newItems = arrayMove(
        activeColumn.items,
        activeColumn.items.indexOf(active.id),
        overColumn.items.indexOf(over.id)
      );
      setColumns(
        columns.map((col) =>
          col.id === overColumn.id ? { ...col, items: newItems } : col
        )
      );
    }
  };

  return (
    <DndContext onDragEnd={handleDragEnd}>
      <div className="kanban-board flex gap-3">
        {columns.map((column) => (
          <Column key={column.id} column={column} />
        ))}
      </div>
    </DndContext>
  );
}

function Column({ column }) {
  const { setNodeRef } = useDroppable({
    id: column.id,
  });

  return (
    <div ref={setNodeRef} className="kanban-column w-1/3 bg-gray-200 p-4 rounded-lg">
      <h2 className="font-bold text-lg">{column.title}</h2>
      <SortableContext items={column.items} strategy={horizontalListSortingStrategy}>
        {column.items.map((item) => (
          <KanbanCard key={item} id={item} />
        ))}
      </SortableContext>
    </div>
  );
}

function KanbanCard({ id }) {
  const { setNodeRef, isDragging } = useSortable({ id });

  return (
    <div
      ref={setNodeRef}
      className={`kanban-card p-4 bg-white rounded shadow-md mb-2 cursor-pointer ${
        isDragging ? 'opacity-50' : ''
      }`}
    >
      {id}
    </div>
  );
}

export default function Index(props) {
  return (
    <AuthenticatedLayout
      auth={props.auth}
      errors={props.errors}
      header={<h2 className="font-semibold text-xl text-gray-800 dark:text-gray-200 leading-tight">Kanban</h2>}
    >
      <Head title="Kanban Board" />
      <KanbanBoard />
    </AuthenticatedLayout>
  );
}
